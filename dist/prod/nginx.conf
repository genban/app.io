upstream play-backend {
   server 127.0.0.1:9000;
}

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

server {
  listen 80;
  server_name _;

  # redirect all http to https
  return 301 https://$host/$request_uri;
}

server {
  listen 443 ssl;

  # http://www.selfsignedcertificate.com/ is useful for development testing
  ssl_certificate /etc/ssl/certs/prod_ssl.cert;
  ssl_certificate_key /etc/ssl/private/prod_ssl.key;

  ssl_ciphers 'EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:+CAMELLIA256:+AES256:+CAMELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:CAMELLIA256-SHA:AES256-SHA:CAMELLIA128-SHA:AES128-SHA';
  add_header Strict-Transport-Security max-age=15768000; # six months
  # use this only if all subdomains support HTTPS!
  # add_header Strict-Transport-Security "max-age=15768000; includeSubDomains"

  server_name _;
  location / {
    proxy_buffering    off;
    proxy_http_version 1.1;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header   Host              $http_host;
    proxy_set_header   Upgrade           $http_upgrade;
    proxy_set_header   Connection        $connection_upgrade;

    client_max_body_size 100M;

    proxy_pass          http://play-backend;
    proxy_read_timeout  90;
  }
}

# server {
#   listen      80;
#   server_name _;
#   location / {
#      proxy_pass http://play-backend;
#   }
# }

############################################################
#  AWS ELB proxy proxy_protocol
#
# server {
#   listen 443 ssl proxy_protocol;
#
#   # http://www.selfsignedcertificate.com/ is useful for development testing
#   ssl_certificate /etc/ssl/certs/prod_ssl.cert;
#   ssl_certificate_key /etc/ssl/private/prod_ssl.key;
#
#   ssl_ciphers 'EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:+CAMELLIA256:+AES256:+CAMELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!ECDSA:CAMELLIA256-SHA:AES256-SHA:CAMELLIA128-SHA:AES128-SHA';
#   add_header Strict-Transport-Security max-age=15768000; # six months
#   # use this only if all subdomains support HTTPS!
#   # add_header Strict-Transport-Security "max-age=15768000; includeSubDomains"
#
#   server_name _;
#   location / {
#     proxy_buffering    off;
#     proxy_http_version 1.1;
#     proxy_set_header   X-Forwarded-Proto $scheme;
#     proxy_set_header   X-Forwarded-For   $proxy_protocol_addr;
#     proxy_set_header   Host              $http_host;
#     proxy_set_header   Upgrade           $http_upgrade;
#     proxy_set_header   Connection        $connection_upgrade;
#
#     client_max_body_size 100M;
#
#     proxy_pass          http://play-backend;
#     proxy_read_timeout  90;
#   }
# }
#
############################################################

############################################################
#  /etc/nginx/nginx.conf
#
# worker_processes 4;
#
# events {
#   worker_connections 1024;
# }

# http {
#   include                    /etc/nginx/mime.types;
#   default_type               application/octet-stream;
#   sendfile                   on;
#   keepalive_timeout          65;
#   ssl_prefer_server_ciphers  on;
#   ssl_protocols              TLSv1 TLSv1.1 TLSv1.2;
# }
#
############################################################

############################################################
#  Added proxy protocol policy to your AWS ELB
#
# aws elb create-load-balancer-policy --load-balancer-name $your-elb --policy-name $your-elb-ProxyProtocol-policy --policy-type-name ProxyProtocolPolicyType --policy-attributes AttributeName=ProxyProtocol,AttributeValue=true
# aws elb set-load-balancer-policies-for-backend-server --load-balancer-name $your-elb --instance-port 443 --policy-names $your-elb-ProxyProtocol-policy
#
############################################################